# -*- coding: utf-8 -*-
"""GAN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BM_rax6uzMWLcSx2YbkPDPtwcywzNXXZ
"""

# !pip install tensorflow matplotlib tensorflow-datasets

import tensorflow_datasets as tfds
import matplotlib.pyplot as plt

ds = tfds.load("fashion_mnist", split="train")

ds.as_numpy_iterator().next().keys()

import numpy as np

dataiterator = ds.as_numpy_iterator()

dataiterator.next()

fig, ax = plt.subplots(ncols=4, figsize=(20, 20))
for idx in range(4):
  sample = dataiterator.next()
  ax[idx].imshow(np.squeeze(sample["image"]))
  ax[idx].title.set_text(sample["label"])

def scale_image(data):
  image = data["image"]
  return image / 255

ds = tfds.load("fashion_mnist", split="train")
ds = ds.map(scale_image)
ds = ds.cache()
ds = ds.shuffle(60000)
ds = ds.batch(128)
ds = ds.prefetch(64)

import tensorflow as tf
from tensorflow import keras

def build_generator():
  model = keras.Sequential([
      keras.layers.Dense(7 * 7 * 128, input_dim=128),
      keras.layers.LeakyReLU(0.2),
      keras.layers.Reshape((7, 7, 128)),

      keras.layers.UpSampling2D(),    
      keras.layers.Conv2D(128, 5, padding="same"),
      keras.layers.LeakyReLU(0.2),

      keras.layers.UpSampling2D(),    
      keras.layers.Conv2D(128, 5, padding="same"),
      keras.layers.LeakyReLU(0.2),

      keras.layers.Conv2D(128, 4, padding="same"),
      keras.layers.LeakyReLU(0.2),

      keras.layers.Conv2D(128, 4, padding="same"),
      keras.layers.LeakyReLU(0.2),

      keras.layers.Conv2D(1, 4, padding="same", activation="sigmoid")
  ])
  return model

generator = build_generator()

generator.summary()

img = generator.predict(np.random.randn(4, 128, 1))

def build_discriminator():
  model = keras.Sequential([
    keras.layers.Conv2D(32, 5, input_shape=(28, 28, 1)),
    keras.layers.LeakyReLU(0.2),
    keras.layers.Dropout(0.4),

    keras.layers.Conv2D(64, 5),
    keras.layers.LeakyReLU(0.2),
    keras.layers.Dropout(0.4),

    keras.layers.Conv2D(128, 5),
    keras.layers.LeakyReLU(0.2),
    keras.layers.Dropout(0.4),

    keras.layers.Conv2D(256, 5),
    keras.layers.LeakyReLU(0.2),
    keras.layers.Dropout(0.4),

    keras.layers.Flatten(),
    keras.layers.Dropout(0.4),
    keras.layers.Dense(1, activation="sigmoid")
  ])
  return model

discriminator = build_discriminator()

discriminator.summary()

discriminator.predict(img)

g_opt = keras.optimizers.Adam(learning_rate=0.0001)
d_opt = keras.optimizers.Adam(learning_rate=0.00001)
g_loss = keras.losses.BinaryCrossentropy()
d_loss = keras.losses.BinaryCrossentropy()

class FashionGAN(keras.models.Model):
  def __init__(self, generator, discriminator, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.generator = generator
    self.discriminator = discriminator
  
  def compile(self, g_opt, d_opt, g_loss, d_loss, *args, **kwargs):
    super().compile(*args, **kwargs)
    self.g_opt = g_opt
    self.d_opt = d_opt
    self.g_loss = g_loss
    self.d_loss = d_loss
  
  def train_step(self, batch):
    real_images = batch
    fake_images = self.generator(tf.random.normal((128, 128, 1)), training=False)

    with tf.GradientTape() as d_tape:
      yhat_real = self.discriminator(real_images, training=True)
      yhat_fake = self.discriminator(fake_images, training=True)
      yhat_realfake = tf.concat([yhat_real, yhat_fake], axis=0)

      y_realfake = tf.concat([tf.zeros_like(yhat_real), tf.ones_like(yhat_fake)], axis=0)

      noise_real = 0.15 * tf.random.uniform(tf.shape(yhat_real))
      noise_fake = -0.15 * tf.random.uniform(tf.shape(yhat_fake))
      y_realfake += tf.concat([noise_real, noise_fake], axis=0)

      total_d_loss = self.d_loss(y_realfake, yhat_realfake)

    dgrad = d_tape.gradient(total_d_loss, self.discriminator.trainable_variables)
    self.d_opt.apply_gradients(zip(dgrad, self.discriminator.trainable_variables))

    with tf.GradientTape() as g_tape:
      gen_images = self.generator(tf.random.uniform((128, 128, 1)), training=True)
      predicted_labels = self.discriminator(gen_images, training=False)
      
      total_g_loss = self.g_loss(tf.zeros_like(predicted_labels), predicted_labels)
    
    ggrad = g_tape.gradient(total_g_loss, self.generator.trainable_variables)
    self.g_opt.apply_gradients(zip(ggrad, self.generator.trainable_variables))

    return {"d_loss": total_d_loss, "g_loss": total_g_loss}

fashgan = FashionGAN(generator, discriminator)

fashgan.compile(g_opt, d_opt, g_loss, d_loss)

hist = fashgan.fit(ds, epochs=20)

plt.suptitle("Loss")
plt.plot(hist.history["d_loss"], label="d_loss")
plt.plot(hist.history["g_loss"], label="g_loss")
plt.legend()
plt.show()

generator.save("./generator.h5")
discriminator.save("./discriminator.h5")

